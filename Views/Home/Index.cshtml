@model IEnumerable<Product>

@{
    ViewData["Title"] = "Бушель";
}

<div class="container">
    <div class="text-center mb-5 py-5 text-white container_about">
        <h2 class="display-5">Интернет-магазин кондитерской</h2>
        <h1 class="display-3">Бушель</h1>
        <hr class="my-4 bg-white">
        <div class="mt-4">
            <a class="btn btn-outline-light btn-lg me-2" href="/Category" role="button">
                <i class="fas fa-box"></i> Каталог
            </a>
            <a class="btn btn-outline-light btn-lg" href="/Home/UserGuide" role="button">
                <i class="fas fa-question"></i> Как сделать заказ
            </a>
        </div>
    </div>

    <!-- Каталог товаров -->
    <div class="products-section">
        <h2 class="text-center mb-4">Каталог товаров</h2>
        <hr class="mb-4">
        @if (ViewBag.SearchTerm != null)
        {
            <div class="row mb-4">
                <div class="col">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h2 class="mb-2">Результаты поиска: "@ViewBag.SearchTerm"</h2>
                            <p class="text-muted mb-0">Найдено товаров: @Model.Count()</p>
                        </div>
                        <a href="/" class="btn btn-outline-primary">
                            <i class="bi bi-grid"></i> Каталог товаров
                        </a>
                    </div>
                </div>
            </div>
        }

        @if (!Model.Any())
        {
            <div class="alert alert-info mt-4">
                @(ViewBag.SearchTerm != null ? "По вашему запросу ничего не найдено" : "В каталоге пока нет товаров")
            </div>
        }
        else
        {
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                @foreach (var product in Model)
                {
                    <div class="col">
                        <div class="card h-100 product-card shadow-sm">
                            <div class="product-image-container">
                                <img src="@product.ImageUrl" class="product-image" alt="@product.Name">
                            </div>
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@product.Name</h5>
                                <p class="card-text flex-grow-1">@product.Description</p>
                                <div class="d-flex justify-content-between align-items-center mt-3">
                                    <div class="price-block">
                                        <div class="main-price">@product.Price.ToString("N0") ₽</div>
                                    </div>
                                    <div class="d-flex gap-2">
                                        <button class="btn btn-icon" 
                                                onclick="addToWishlist(@product.Id)"
                                                data-wishlist-button
                                                data-product-id="@product.Id">
                                            <i class="bi bi-heart"></i>
                                        </button>
                                        <button class="btn btn-icon" onclick="addToCart(@product.Id)">
                                            <i class="bi bi-cart"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<style>
    h4 {
        color: #334E26; 
    }
.hero-section {
    background: linear-gradient(135deg, #0d6efd 0%, #0a58ca 100%);
    padding: 4rem 2rem;
    margin-top: -1.5rem;
    border-radius: 0 0 2rem 2rem;
}

.feature-box {
    transition: transform 0.3s ease;
    background: white;
}

.feature-box:hover {
    transform: translateY(-5px);
}

.category-card {
    background: white;
    transition: all 0.3s ease;
    border: 1px solid #dee2e6;
}

.category-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 .5rem 1rem rgba(0,0,0,.15)!important;
}

.product-card {
    transition: transform 0.3s ease;
}

.product-card:hover {
    transform: translateY(-5px);
}

.product-image-container {
    height: 550px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
}

.product-image {
    max-height: 100%;
    width: auto;
    object-fit: contain;
}
</style>

<script>
function addToWishlist(productId) {
    const button = document.querySelector(`[data-product-id="${productId}"]`);
    const icon = button.querySelector('[data-wishlist-icon]');
    
    // Если товар уже в списке желаемого, удаляем его
    if (button.classList.contains('in-wishlist')) {
        fetch('/Wishlist/RemoveFromWishlist', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(productId)
        })
        .then(response => {
            if (response.status === 401) {
                toastr.error('Необходима авторизация');
                window.location.href = '/Home/Login';
                return;
            }
            return response.json();
        })
        .then(data => {
            if (!data) return;
            if (data.success) {
                button.classList.remove('in-wishlist');
                icon.classList.remove('bi-heart-fill');
                icon.classList.add('bi-heart');
                toastr.success('Товар удален из списка желаемого');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            toastr.error('Произошла ошибка при удалении товара');
        });
        return;
    }

    // Если товара нет в списке желаемого, добавляем его
    fetch('/Wishlist/AddToWishlist', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        },
        body: JSON.stringify(productId)
    })
    .then(response => {
        if (response.status === 401) {
            toastr.error('Необходима авторизация');
            window.location.href = '/Home/Login';
            return;
        }
        return response.json();
    })
    .then(data => {
        if (!data) return;
        if (data.success) {
            button.classList.add('in-wishlist');
            icon.classList.remove('bi-heart');
            icon.classList.add('bi-heart-fill');
            toastr.success('Товар добавлен в список желаемого');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        toastr.error('Произошла ошибка при добавлении товара');
    });
}

// Функция для проверки товаров в списке желаемого
function checkWishlistItems() {
    document.querySelectorAll('[data-wishlist-button]').forEach(button => {
        const productId = button.getAttribute('data-product-id');
        const icon = button.querySelector('[data-wishlist-icon]');
        
        fetch(`/Wishlist/IsInWishlist?productId=${productId}`)
            .then(response => response.json())
            .then(data => {
                if (data.isInWishlist) {
                    button.classList.add('in-wishlist');
                    icon.classList.remove('bi-heart');
                    icon.classList.add('bi-heart-fill');
                }
            });
    });
}

// Вызываем проверку при загрузке страницы
document.addEventListener('DOMContentLoaded', checkWishlistItems);
</script>
